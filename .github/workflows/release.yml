name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build Linux AMD64
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o pg-lock-check-linux-amd64 \
            ./cmd/pg-lock-check
      
      - name: Build Linux ARM64
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
          CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc GOOS=linux GOARCH=arm64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o pg-lock-check-linux-arm64 \
            ./cmd/pg-lock-check
      
      - name: Create archives
        run: |
          tar czf pg-lock-check-${{ steps.version.outputs.version }}-linux-amd64.tar.gz pg-lock-check-linux-amd64 README.md LICENSE
          tar czf pg-lock-check-${{ steps.version.outputs.version }}-linux-arm64.tar.gz pg-lock-check-linux-arm64 README.md LICENSE
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            *.tar.gz

  build-macos:
    name: Build macOS binaries
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build macOS AMD64
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o pg-lock-check-darwin-amd64 \
            ./cmd/pg-lock-check
      
      - name: Build macOS ARM64
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o pg-lock-check-darwin-arm64 \
            ./cmd/pg-lock-check
      
      - name: Create archives
        run: |
          tar czf pg-lock-check-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz pg-lock-check-darwin-amd64 README.md LICENSE
          tar czf pg-lock-check-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz pg-lock-check-darwin-arm64 README.md LICENSE
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            *.tar.gz

  build-windows:
    name: Build Windows binaries
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Get version
        id: version
        shell: bash
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build Windows AMD64
        shell: bash
        run: |
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o pg-lock-check-windows-amd64.exe \
            ./cmd/pg-lock-check
      
      - name: Create archives
        shell: bash
        run: |
          7z a pg-lock-check-${{ steps.version.outputs.version }}-windows-amd64.zip pg-lock-check-windows-amd64.exe README.md LICENSE
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            *.zip

  release:
    name: Create Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: ./artifacts/
      
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-binaries
          path: ./artifacts/
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: ./artifacts/
      
      - name: Create checksums
        run: |
          cd artifacts
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: pg-lock-check ${{ steps.version.outputs.version }}
          body: |
            ## PostgreSQL Lock Analyzer ${{ steps.version.outputs.version }}
            
            A CLI tool that examines SQL statements for potential locking issues.
            
            ### Installation
            
            Download the appropriate binary for your platform and extract it.
            
            ### Supported Platforms
            
            - Linux: amd64, arm64
            - macOS: amd64 (Intel), arm64 (Apple Silicon)
            - Windows: amd64
            
            Note: Windows ARM64 users need to build from source due to CGO toolchain limitations.
            
            ### Verify Downloads
            
            Check the `checksums.txt` file to verify your download.
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
            artifacts/checksums.txt